import { Type } from '@nestjs/common';
import { randomUUID } from 'crypto';

/*
Junto com as hierarquias tradicionais orientadas a objetos,
outra maneira popular de construir classes a partir de componentes reutiliz√°ves e cri√°-las combinando classes
parciais mais simples.

Isso √© conhecido como padr√£o Mixin .

Mixins fornecem uma forma de reutiliza√ß√£o de c√≥digo que √© baseada em comportamento de composi√ß√£o .
 A flexibilidade obtida com o uso de mixins se torna aparente quando voc√™ come√ßa a comp√¥-los.
  Uma classe pode incluir quantos mixins voc√™ quiser, ao contr√°rio da heran√ßa (que s√≥ pode herdar de 1 classe).
 */
export function WithUuid<TBase extends Type>(Base: TBase) {
  return class extends Base {
    uuid = randomUUID();

    regenerateUuid() {
      this.uuid = randomUUID();
    }
  };
}

export function WithTimestamp<TBase extends Type>(Base: TBase) {
  return class extends Base {
    timestamp = Date.now();

    regenerateTimestamp() {
      this.timestamp = Date.now();
    }
  };
}

export class Coffee {
  constructor(public name: string) {}
}

const CoffeeWithUuidCls = WithUuid(Coffee); // üëà use the new WithUuid mixin
const CoffeeWithTimestampCls = WithTimestamp(CoffeeWithUuidCls); // üëà use the new WithTimestamp mixin

const coffee = new CoffeeWithTimestampCls('Buddy Brew');
//PODEMOS COMPOR VARIOS MIXXIN
